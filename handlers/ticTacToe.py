from aiogram import types
import asyncio, os, json

from keyboard import *
from db import *
from cfg import bot
from utils.utils_tictactoe import *



async def checked_place_game(inline_id, place):
	room = get_game_room(inline_id=inline_id)[0]
	# room_place = json.loads(room[1])

	if (place[0] == "‚≠ïÔ∏è" and place[4] == "‚≠ïÔ∏è" and place[8] == "‚≠ïÔ∏è") or (place[6] == "‚≠ïÔ∏è" and place[4] == "‚≠ïÔ∏è" and place[2] == "‚≠ïÔ∏è") or (place[0] == "‚≠ïÔ∏è" and place[1] == "‚≠ïÔ∏è" and place[2] == "‚≠ïÔ∏è") or (place[3] == "‚≠ïÔ∏è" and place[4] == "‚≠ïÔ∏è" and place[5] == "‚≠ïÔ∏è") or (place[6] == "‚≠ïÔ∏è" and place[7] == "‚≠ïÔ∏è" and place[8] == "‚≠ïÔ∏è") or (place[0] == "‚≠ïÔ∏è" and place[3] == "‚≠ïÔ∏è" and place[6] == "‚≠ïÔ∏è") or (place[1] == "‚≠ïÔ∏è" and place[4] == "‚≠ïÔ∏è" and place[7] == "‚≠ïÔ∏è") or (place[2] == "‚≠ïÔ∏è" and place[5] == "‚≠ïÔ∏è" and place[8] == "‚≠ïÔ∏è"):
		update_game_room(inline_id=inline_id, index="going", value="end")
		return await bot.edit_message_text(inline_message_id=inline_id, text=f"–í—ã–∏–≥—Ä–∞–ª <a href='tg://user?id={room[2]}'>‚≠ïÔ∏è</a>", parse_mode="HTML", reply_markup=update_inline_markup(inline_id, place))
	elif (place[0] == "‚ùé" and place[4] == "‚ùé" and place[8] == "‚ùé") or (place[6] == "‚ùé" and place[4] == "‚ùé" and place[2] == "‚ùé") or (place[0] == "‚ùé" and place[1] == "‚ùé" and place[2] == "‚ùé") or (place[3] == "‚ùé" and place[4] == "‚ùé" and place[5] == "‚ùé") or (place[6] == "‚ùé" and place[7] == "‚ùé" and place[8] == "‚ùé") or (place[0] == "‚ùé" and place[3] == "‚ùé" and place[6] == "‚ùé") or (place[1] == "‚ùé" and place[4] == "‚ùé" and place[7] == "‚ùé") or (place[2] == "‚ùé" and place[5] == "‚ùé" and place[8] == "‚ùé"):
		update_game_room(inline_id=inline_id, index="going", value="end")
		return await bot.edit_message_text(inline_message_id=inline_id, text=f"–í—ã–∏–≥—Ä–∞–ª <a href='tg://user?id={room[0]}'>‚ùé</a>", parse_mode="HTML", reply_markup=update_inline_markup(inline_id, place))
	if "üî•" not in place:
		update_game_room(inline_id=inline_id, index="going", value="end")
		return await bot.edit_message_text(inline_message_id=inline_id, text=f"–ù–∏—á—å—è!", reply_markup=update_inline_markup(inline_id, place))

	await bot.edit_message_text(inline_message_id=inline_id, text="–ö—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏", reply_markup=update_inline_markup(inline_id, place))

async def callback_handler_ticTacToe(call: types.CallbackQuery):
	room = get_game_room(inline_id=call.inline_message_id)[0]
	chat_id = str(call["from"].id)
	if "plane_" in call.data:
		room_place = json.loads(room[1])
		# room_place[int(call.data.split("plane_")[1])] = "‚ùé"
		if await checked_click_button(room_place, call.data):
			return await call.answer("–ö–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞")

		if room[4] == "end":
			await call.answer(text="–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–Ω–∞", show_alert=True)
			try: return await bot.edit_message_text(inline_message_id=call.inline_message_id, text=f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–Ω–∞", reply_markup=update_inline_markup(call.inline_message_id, room_place))
			except Exception as e: print("–û—à–∏–±–∫–∞ –∏–∑ TicTacToe:",e)

		if room[2] is None and chat_id == room[0]:
			return await call.answer(text="–£—Å—Ç—É–ø–∞–π—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫—É —à–∞–≥, –Ω–µ –Ω—É–∂–Ω–æ –±—ã—Ç—å –∂–∞–¥–∏–Ω–æ–π", show_alert=True)
			# await bot.answer_callback_query(callback_query_id=call.id, text="–£—Å—Ç—É–ø–∞–π—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫—É —à–∞–≥, –Ω–µ –Ω—É–∂–Ω–æ –±—ã—Ç—å –∂–∞–¥–∏–Ω–æ–π", show_alert=1)  
		elif room[2] is None and chat_id != room[0]:
			update_game_room(inline_id=call.inline_message_id, index="player_2", value=chat_id)
			await bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É! –í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ ‚≠ïÔ∏è")
			room_place[int(call.data.split("plane_")[1])] = "‚≠ïÔ∏è"
			update_game_room(inline_id=call.inline_message_id, index="going", value=room[0])

		if room[4] is not None and room[4] != chat_id:
			return await bot.answer_callback_query(callback_query_id=call.id, text="–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫, –π–æ—É")
		
		if room[4] == chat_id and chat_id == room[0]:
			update_game_room(inline_id=call.inline_message_id, index="going", value=room[2])
			room_place[int(call.data.split("plane_")[1])] = "‚ùé"
		else: 
			update_game_room(inline_id=call.inline_message_id, index="going", value=room[0])
			room_place[int(call.data.split("plane_")[1])] = "‚≠ïÔ∏è"

		await checked_place_game(call.inline_message_id, room_place)

	if call.data == "restart_zero_game":
		room = get_game_room(inline_id=call.inline_message_id)[0]
		update_game_room(inline_id=call.inline_message_id, index="going", value=room[2])
		update_game_room(inline_id=call.inline_message_id, index="place", value=json.dumps(["üî•" for _ in range(9)]))
		return await bot.edit_message_text(inline_message_id=call.inline_message_id, text=f"–ö—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏\n–ü–µ—Ä–≤—ã–π —Ö–æ–¥–∏—Ç <a href='tg://user?id={room[2]}'>—Å–æ–ø–µ—Ä–Ω–∏–∫</a>", parse_mode="HTML", reply_markup=zero_game_markup())
	elif call.data == "delete_zero_game":
		room = get_game_room(inline_id=call.inline_message_id)[0]
		await bot.edit_message_text(inline_message_id=call.inline_message_id, text=f"–ö—Ä—É—Ç–æ –ø–æ–∏–≥—Ä–∞–ª–∏ ‚ò∫Ô∏è")
		delete_game_room(inline_id=call.inline_message_id)
		return await call.answer(text="–ò–≥—Ä–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞")
	elif call.data == "start_zero_game":
		print(call)
		if room[0] == chat_id: return await call.answer("–ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–ª–∂–µ–Ω –≤–∞—à —Å–æ–ø–µ—Ä–Ω–∏–∫")
		update_game_room(inline_id=call.inline_message_id, index="place", value=json.dumps(["üî•" for _ in range(9)]))
		update_game_room(inline_id=call.inline_message_id, index="type_game", value="zero-game")
		update_game_room(inline_id=call.inline_message_id, index="player_2", value=chat_id)
		await bot.edit_message_text(inline_message_id=call.inline_message_id, text=f"–ö—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏\n–ü–µ—Ä–≤—ã–π —Ö–æ–¥–∏—Ç <a href='tg://user?id={get_game_room(inline_id=call.inline_message_id)[0][2]}'>—Å–æ–ø–µ—Ä–Ω–∏–∫</a>", parse_mode="HTML", reply_markup=zero_game_markup())

	await call.answer()


# if __name__ == '__main__':
# 	executor.start_polling(dp, skip_updates=True)